{"version":3,"sources":["logo.svg","components/Header.js","components/Base.js","components/Pxtorem.js","components/Remtopx.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","Logo","alt","Base","setBase","base","type","maxLength","size","name","id","placeholder","value","onChange","e","target","Pxtorem","useState","pxValue","setPxValue","remResult","setRemResult","useEffect","result","Math","round","pattern","readOnly","Remtopx","remValue","setRemValue","pxResult","setPxResult","Footer","href","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uFAAAA,EAAOC,QAAU,IAA0B,kC,wLCY5BC,MATf,WACE,OACE,yBAAKC,UAAU,YACb,yBAAKA,UAAU,OAAOC,IAAKC,IAAMC,IAAI,WACrC,qFCgBSC,MArBf,YAA+B,IAAhBC,EAAe,EAAfA,QAAQC,EAAO,EAAPA,KACrB,OACE,yBAAKN,UAAU,eACb,wDACA,6BACE,2BACEO,KAAK,SACLC,UAAU,IACVC,KAAK,IACLT,UAAU,uBACVU,KAAK,OACLC,GAAG,OACHC,YAAY,IACZC,MAAOP,EACPQ,SAAU,SAACC,GAAOV,EAAQU,EAAEC,OAAOH,aC4B9BI,MA1Cf,YAA0B,IAARX,EAAO,EAAPA,KAAO,EAEMY,mBAAS,IAFf,mBAEhBC,EAFgB,KAERC,EAFQ,OAGUF,mBAAS,GAHnB,mBAGhBG,EAHgB,KAGNC,EAHM,KAcvB,OATAC,qBAAU,WACR,IAAIC,EAASL,EAAQb,EACrBgB,EAAcG,KAAKC,MAAe,IAATF,GAAiB,OAC1C,CAACL,EAAQb,IAOT,yBAAKN,UAAU,eACb,yBAAKA,UAAU,UACb,2BACEO,KAAK,SACLP,UAAU,uBACVU,KAAK,WACLC,GAAG,WACHC,YAAY,IACZe,QAAQ,QACRd,MAAOM,EACPL,SAfe,SAACC,GACtBA,EAAEC,OAAOH,MAAQ,KAAOO,EAAW,GAAKA,EAAWL,EAAEC,OAAOH,UAgBxD,kCAEF,yBAAKb,UAAU,UACf,2BACIO,KAAK,SACLP,UAAU,yBACVa,MAAOQ,EACPO,UAAQ,IAEV,uBAAG5B,UAAU,YAAb,UCIO6B,MAxCf,YAA0B,IAARvB,EAAO,EAAPA,KAAO,EAEQY,mBAAS,IAFjB,mBAEhBY,EAFgB,KAEPC,EAFO,OAGQb,mBAAS,GAHjB,mBAGhBc,EAHgB,KAGPC,EAHO,KAavB,OARAV,qBAAU,WACR,IAAIC,EAASM,EAAWxB,EACxB2B,EAAaR,KAAKC,MAAe,IAATF,GAAiB,OACzC,CAACM,EAASxB,IAMV,yBAAKN,UAAU,eACb,yBAAKA,UAAU,UACb,2BACEO,KAAK,SACLP,UAAU,uBACVU,KAAK,YACLC,GAAG,YACHC,YAAY,IACZC,MAAOiB,EACPhB,SAbgB,SAACC,GACvBA,EAAEC,OAAOH,MAAQ,IAAMkB,EAAY,GAAKA,EAAYhB,EAAEC,OAAOH,UAczD,mCAEF,yBAAKb,UAAU,UACb,2BACEO,KAAK,SACLP,UAAU,yBACV4B,UAAQ,EACRf,MAAOmB,IAET,uBAAGhC,UAAU,YAAb,SCzBOkC,MATf,WACI,OACI,yBAAKlC,UAAU,cACb,kEACA,4CAAiB,uBAAGmC,KAAK,uCAAR,UAAjB,OCiBKC,MAff,WAAgB,IAAD,EACUlB,mBAAS,IADnB,mBACNZ,EADM,KACDD,EADC,KAEb,OACE,yBAAKL,UAAU,OACb,yBAAKA,UAAU,eACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAMK,QAASA,EAASC,KAAMA,IAC9B,kBAAC,EAAD,CAASA,KAAMA,IACf,kBAAC,EAAD,CAASA,KAAMA,IACf,kBAAC,EAAD,SCLY+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4526c082.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.c9701157.svg\";","import React from \"react\";\nimport Logo from \"../logo.svg\";\n\nfunction Header() {\n  return (\n    <div className=\"app-head\">\n      <img className=\"logo\" src={Logo} alt=\"PXOREM\" />\n      <h1>Convert between PX and REM values of CSS size units</h1>\n    </div>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\nfunction Base({setBase,base}) {\n  return (\n    <div className=\"shadow base\">\n      <p> SET BASE FONT SIZE IN PX</p>\n      <div>\n        <input\n          type=\"number\"\n          maxLength=\"4\" \n          size=\"4\"\n          className=\"base-box text-shadow\"\n          name=\"base\"\n          id=\"base\"\n          placeholder=\"0\"\n          value={base}\n          onChange={(e) => {setBase(e.target.value)}}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default Base;\n","import React,{useState,useEffect} from \"react\";\n\nfunction Pxtorem({base}) {\n\n  const [pxValue,setPxValue] = useState('')\n  const [remResult,setRemResult] = useState(0)\n\n  useEffect(() => {\n    let result = pxValue/base\n    setRemResult( Math.round(result * 1000) / 1000)\n  },[pxValue,base])\n\n  const handlePxChange = (e) => {\n    e.target.value > 9999 ? setPxValue(0) : setPxValue(e.target.value)\n  }\n\n  return (\n    <div className=\"convert-box\">\n      <div className=\"shadow\">\n        <input\n          type=\"number\"\n          className=\"size-box text-shadow\"\n          name=\"px-entry\"\n          id=\"px-entry\"\n          placeholder=\"0\"\n          pattern=\"[0-9]\"\n          value={pxValue}\n          onChange = {handlePxChange}\n        />\n        <p>PX</p>\n      </div>\n      <div className=\"shadow\">\n      <input\n          type=\"number\"\n          className=\"result-box text-shadow\"\n          value={remResult}\n          readOnly\n        />\n        <p className=\"res-unit\">REM</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Pxtorem;\n","import React,{useState,useEffect} from \"react\";\n\nfunction Remtopx({base}) {\n\n  const [remValue,setRemValue] = useState('')\n  const [pxResult,setPxResult] = useState(0)\n\n  useEffect(() => {\n    let result = remValue * base\n    setPxResult( Math.round(result * 1000) / 1000)\n  },[remValue,base])\n\n  const handleRemChange = (e) => {\n    e.target.value > 999 ? setRemValue(0) : setRemValue(e.target.value)\n  }\n  return (\n    <div className=\"convert-box\">\n      <div className=\"shadow\">\n        <input\n          type=\"number\"\n          className=\"size-box text-shadow\"\n          name=\"rem-entry\"\n          id=\"rem-entry\"\n          placeholder=\"0\"\n          value={remValue}\n          onChange={handleRemChange}\n        />\n        <p>REM</p>\n      </div>\n      <div className=\"shadow\">\n        <input\n          type=\"number\"\n          className=\"result-box text-shadow\"\n          readOnly\n          value={pxResult}\n        />\n        <p className=\"res-unit\">PX</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Remtopx;\n","import React from 'react'\n\nfunction Footer() {\n    return (\n        <div className=\"app-footer\">\n          <p>A ReactJS project by Jinson Abraham</p>\n          <p>Find this on  <a href=\"https://github.com/web2feel/pxtorem\">Github</a> </p>\n        </div>\n    )\n}\n\nexport default Footer\n","import React,{useState} from \"react\";\nimport \"./App.scss\";\nimport Header from \"./components/Header\";\nimport Base from \"./components/Base\";\nimport Pxtorem from \"./components/Pxtorem\";\nimport Remtopx from \"./components/Remtopx\";\nimport Footer from \"./components/Footer\";\n\nfunction App() {\n  const [base,setBase] = useState(16)\n  return (\n    <div className=\"App\">\n      <div className=\"app-wrapper\">\n        <Header />\n        <Base setBase={setBase} base={base}/>\n        <Pxtorem base={base}/>\n        <Remtopx base={base} />\n        <Footer />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}